to= Comparisons)
## Now we are going to take the columns that have the inducers and concurrents in them and split them- this will allow us to partition the trials into types for matching
IndL<- colsplit(CollapsedCSV$InducerL, split = "-", names = c("IndLDom", "IndLToken", "IndLVal"))
IndR<- colsplit(CollapsedCSV$InducerR, split = "-", names = c("IndRDom", "IndRToken", "IndRVal"))
ConL<- colsplit(CollapsedCSV$ConcurrentL, split = "-", names = c("ConcLDom", "ConcLToken", "ConcLVal"))
ConR<- colsplit(CollapsedCSV$ConcurrentR, split = "-", names = c("ConcRDom", "ConcRToken", "ConcRVal"))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndR))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConR))
CollapsedCSV <- CollapsedCSV %>%
unite(TrialType, IndLVal, ConcLVal, sep = "-", remove = FALSE)
CollapsedCSV$TrialType2 <- mapvalues(CollapsedCSV$TrialType,
from= c("H-H", "L-L", "H-L", "L-H"),
to= c(1,1,2,2))
rm(ConL, ConR, IndL, IndR)
SampleData-Random <- CollapsedCSV
SampleData-Random$Response <- rbinom(n=nrow(SampleData-Random), size = 1, prob = 0.5)
#For Trial Type 2 we need to flip these responses
SampleData-Random <- SampleData-Random %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleData-Random$Response2 <- mapvalues(SampleData-Random$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
# Then just write this output to a CSV
write.csv(SampleData-Random, file= "SampleData-Random.csv")
# Rbinom generates a list of 0s and 1s the same length of our data frame and sticks this into the new response column
SampleDataRandom <- CollapsedCSV
SampleDataRandom$Response <- rbinom(n=nrow(SampleDataRandom), size = 1, prob = 0.5)
#For Trial Type 2 we need to flip these responses
SampleDataRandom <- SampleDataRandom %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandom$Response2 <- mapvalues(SampleDataRandom$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
# Then just write this output to a CSV
write.csv(SampleDataRandom, file= "SampleData-Random.csv")
View(SampleDataRandom)
SampleDataRandomAssocShared <- CollapsedCSV
ComparisonsProbs <- rtruncnorm(n=36, a=0, b=1, mean=0.5, sd=0.15)
SampleDataRandomAssocShared$ComparisonsProb <- mapvalues(SampleDataRandomAssocShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataRandomAssocShared$ComparisonsProb <- as.numeric(SampleDataRandomAssocShared$ComparisonsProb)
SampleDataRandomAssocShared$Response <- sapply(SampleDataRandomAssocShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataRandomAssocShared <- SampleDataRandomAssocShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocShared$Response2 <- mapvalues(SampleDataRandomAssocShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
View(SampleDataRandomAssocShared)
# Then just write this output to a CSV
write.csv(SampleDataRandomAssocShared, file= "SampleData-Random Shared Associations.csv")
View(CollapsedCSV)
IdioAssoc <- unite(SampleDataRandomAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
SampleDataRandomAssocIdio <- CollapsedCSV
IdioAssoc <- unite(SampleDataRandomAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
View(IdioAssoc)
rm(IdioAssoc)
SampleDataRandomAssocIdio <- unite(SampleDataRandomAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
View(SampleDataRandomAssocIdio)
unique(SampleDataRandomAssocIdio$IdioAssoc)
len(unique(SampleDataRandomAssocIdio$IdioAssoc))
length(unique(SampleDataRandomAssocIdio$IdioAssoc))
length(unique(SampleDataRandomAssocIdio$IdioAssoc))ComparisonsProbs <- rtruncnorm(n=length(unique(SampleDataRandomAssocIdio$IdioAssoc)), a=0, b=1, mean=0.5, sd=0.15)
ComparisonsProbs <- rtruncnorm(n=length(unique(SampleDataRandomAssocIdio$IdioAssoc)), a=0, b=1, mean=0.5, sd=0.15)
Comparisons <- unique(SampleDataRandomAssocIdio$IdioAssoc)
Comparisons
SampleDataRandomAssocIdio$ComparisonsProb <- mapvalues(SampleDataRandomAssocIdio$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataRandomAssocIdio$ComparisonsProb <- mapvalues(SampleDataRandomAssocIdio$IdioAssoc,
from= Comparisons,
to= ComparisonsProbs)
View(SampleDataRandomAssocIdio)
SampleDataRandomAssocIdio$ComparisonsProb <- as.numeric(SampleDataRandomAssocIdio$ComparisonsProb)
SampleDataRandomAssocIdio$Response <- sapply(SampleDataRandomAssocIdio$ComparisonsProb, function(p) rbinom(1, 1, p))
View(SampleDataRandomAssocIdio)
SampleDataRandomAssocIdio <- SampleDataRandomAssocIdio %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocIdio$Response2 <- mapvalues(SampleDataRandomAssocIdio$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
View(SampleDataRandomAssocIdio)
SampleDataPosAssocShared <- CollapsedCSV
ComparisonsProbs <- rtruncnorm(n=36, a=0.5, b=1, mean=0.75, sd=0.15)
SampleDataPosAssocShared$ComparisonsProb <- mapvalues(SampleDataPosAssocShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataPosAssocShared$ComparisonsProb <- as.numeric(SampleDataPosAssocShared$ComparisonsProb)
SampleDataPosAssocShared$Response <- sapply(SampleDataPosAssocShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataPosAssocShared <- SampleDataPosAssocShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataPosAssocShared$Response2 <- mapvalues(SampleDataPosAssocShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
View(SampleDataPosAssocShared)
ComparisonsProbs <- rtruncnorm(n=36, a=0.5, b=1, mean=0.75, sd=0.15)
ComparisonsProbs
library(tidyr) # for unite()
library(magrittr) # for pipe (%>%)
library(plyr)
library(truncnorm) # for generating truncated values with a normal distribution
library(reshape)
mainPath <- 'D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/'
setwd(file.path(mainPath, 'data'))
# This takes all of the csv files in a given folder and collapses them into a single dataframe
# So in this case I've taken 40 subjects in each of the 6 conditions and collapsed them into one dataframe
# we are then going to put different types of fake data into the frame for sample analysis
library(data.table)
files <- dir("D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/data/")
temp <- lapply(files, fread, sep = "\t")
CollapsedCSV<- rbindlist(temp)
rm(files, temp)
#######################################
#This bit just collapses trial types under the assumption that inducers and concurrents are symmetrical- i.e. it doesn't matter if we present pitch then ask
# a participant to choose shape, or present shapes and ask participants to choose a pitch
CollapsedCSV <- CollapsedCSV %>%
unite(Comparison, Inducer, Concurrent, sep = "-", remove = FALSE) # Joins the columns into a single column
Comparisons <- c("Pitch-Amp", "Pitch-Noise", "Pitch-Shape", "Pitch-Size", "Pitch-Speed", "Pitch-Color", "Pitch-Brightness", "Pitch-Affect",
"Amp-Noise", "Amp-Shape", "Amp-Size", "Amp-Speed", "Amp-Color", "Amp-Brightness", "Amp-Affect",
"Noise-Shape", "Noise-Size", "Noise-Speed", "Noise-Color", "Noise-Brightness", "Noise-Affect",
"Shape-Size", "Shape-Speed", "Shape-Color", "Shape-Brightness", "Shape-Affect",
"Size-Speed", "Size-Color", "Size-Brightness", "Size-Affect",
"Speed-Color", "Speed-Brightness", "Speed-Affect",
"Color-Brightness", "Color-Affect",
"Brightness-Affect")
ComparisonsOpp <- c("Amp-Pitch", "Noise-Pitch", "Shape-Pitch", "Size-Pitch", "Speed-Pitch", "Color-Pitch", "Brightness-Pitch", "Affect-Pitch",
"Noise-Amp", "Shape-Amp", "Size-Amp", "Speed-Amp", "Color-Amp", "Brightness-Amp", "Affect-Amp",
"Shape-Noise", "Size-Noise", "Speed-Noise", "Color-Noise", "Brightness-Noise", "Affect-Noise",
"Size-Shape", "Speed-Shape", "Color-Shape", "Brightness-Shape", "Affect-Shape",
"Speed-Size", "Color-Size", "Brightness-Size", "Affect-Size",
"Color-Speed", "Brightness-Speed", "Affect-Speed",
"Brightness-Color", "Affect-Color",
"Affect-Brightness")
CollapsedCSV$Comparison <- mapvalues(CollapsedCSV$Comparison,
from= ComparisonsOpp,
to= Comparisons)
## Now we are going to take the columns that have the inducers and concurrents in them and split them- this will allow us to partition the trials into types for matching
IndL<- colsplit(CollapsedCSV$InducerL, split = "-", names = c("IndLDom", "IndLToken", "IndLVal"))
IndR<- colsplit(CollapsedCSV$InducerR, split = "-", names = c("IndRDom", "IndRToken", "IndRVal"))
ConL<- colsplit(CollapsedCSV$ConcurrentL, split = "-", names = c("ConcLDom", "ConcLToken", "ConcLVal"))
ConR<- colsplit(CollapsedCSV$ConcurrentR, split = "-", names = c("ConcRDom", "ConcRToken", "ConcRVal"))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndR))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConR))
CollapsedCSV <- CollapsedCSV %>%
unite(TrialType, IndLVal, ConcLVal, sep = "-", remove = FALSE)
CollapsedCSV$TrialType2 <- mapvalues(CollapsedCSV$TrialType,
from= c("H-H", "L-L", "H-L", "L-H"),
to= c(1,1,2,2))
rm(ConL, ConR, IndL, IndR)
############################################################################################################################################
########################## Now we start generating the various types of sample datasets
#### First, a totally random one
# Rbinom generates a list of 0s and 1s the same length of our data frame and sticks this into the new response column
SampleDataRandom <- CollapsedCSV
SampleDataRandom$Response <- rbinom(n=nrow(SampleDataRandom), size = 1, prob = 0.5)
#For Trial Type 2 we need to flip these responses
SampleDataRandom <- SampleDataRandom %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandom$Response2 <- mapvalues(SampleDataRandom$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
##############################
# Generate a random associations for all possible comparisons that are SHARED by all participants
SampleDataRandomAssocShared <- CollapsedCSV
ComparisonsProbs <- rtruncnorm(n=36, a=0, b=1, mean=0.5, sd=0.15)
SampleDataRandomAssocShared$ComparisonsProb <- mapvalues(SampleDataRandomAssocShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataRandomAssocShared$ComparisonsProb <- as.numeric(SampleDataRandomAssocShared$ComparisonsProb)
SampleDataRandomAssocShared$Response <- sapply(SampleDataRandomAssocShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataRandomAssocShared <- SampleDataRandomAssocShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocShared$Response2 <- mapvalues(SampleDataRandomAssocShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
##########################################
# Generate a random association for all possible comparisons - each participant has IDIOSYNCRATIC associations
SampleDataRandomAssocIdio <- CollapsedCSV
SampleDataRandomAssocIdio <- unite(SampleDataRandomAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
Comparisons2 <- unique(SampleDataRandomAssocIdio$IdioAssoc)
ComparisonsProbs <- rtruncnorm(n=length(unique(SampleDataRandomAssocIdio$IdioAssoc)), a=0, b=1, mean=0.5, sd=0.15)
SampleDataRandomAssocIdio$ComparisonsProb <- mapvalues(SampleDataRandomAssocIdio$IdioAssoc,
from= Comparisons2,
to= ComparisonsProbs)
SampleDataRandomAssocIdio$ComparisonsProb <- as.numeric(SampleDataRandomAssocIdio$ComparisonsProb)
SampleDataRandomAssocIdio$Response <- sapply(SampleDataRandomAssocIdio$ComparisonsProb, function(p) rbinom(1, 1, p))
SampleDataRandomAssocIdio <- SampleDataRandomAssocIdio %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocIdio$Response2 <- mapvalues(SampleDataRandomAssocIdio$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
library(tidyr) # for unite()
library(magrittr) # for pipe (%>%)
library(plyr)
library(truncnorm) # for generating truncated values with a normal distribution
library(reshape)
mainPath <- 'D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/'
setwd(file.path(mainPath, 'data'))
# This takes all of the csv files in a given folder and collapses them into a single dataframe
# So in this case I've taken 40 subjects in each of the 6 conditions and collapsed them into one dataframe
# we are then going to put different types of fake data into the frame for sample analysis
library(data.table)
files <- dir("D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/data/")
temp <- lapply(files, fread, sep = "\t")
CollapsedCSV<- rbindlist(temp)
rm(files, temp)
#######################################
#This bit just collapses trial types under the assumption that inducers and concurrents are symmetrical- i.e. it doesn't matter if we present pitch then ask
# a participant to choose shape, or present shapes and ask participants to choose a pitch
CollapsedCSV <- CollapsedCSV %>%
unite(Comparison, Inducer, Concurrent, sep = "-", remove = FALSE) # Joins the columns into a single column
Comparisons <- c("Pitch-Amp", "Pitch-Noise", "Pitch-Shape", "Pitch-Size", "Pitch-Speed", "Pitch-Color", "Pitch-Brightness", "Pitch-Affect",
"Amp-Noise", "Amp-Shape", "Amp-Size", "Amp-Speed", "Amp-Color", "Amp-Brightness", "Amp-Affect",
"Noise-Shape", "Noise-Size", "Noise-Speed", "Noise-Color", "Noise-Brightness", "Noise-Affect",
"Shape-Size", "Shape-Speed", "Shape-Color", "Shape-Brightness", "Shape-Affect",
"Size-Speed", "Size-Color", "Size-Brightness", "Size-Affect",
"Speed-Color", "Speed-Brightness", "Speed-Affect",
"Color-Brightness", "Color-Affect",
"Brightness-Affect")
ComparisonsOpp <- c("Amp-Pitch", "Noise-Pitch", "Shape-Pitch", "Size-Pitch", "Speed-Pitch", "Color-Pitch", "Brightness-Pitch", "Affect-Pitch",
"Noise-Amp", "Shape-Amp", "Size-Amp", "Speed-Amp", "Color-Amp", "Brightness-Amp", "Affect-Amp",
"Shape-Noise", "Size-Noise", "Speed-Noise", "Color-Noise", "Brightness-Noise", "Affect-Noise",
"Size-Shape", "Speed-Shape", "Color-Shape", "Brightness-Shape", "Affect-Shape",
"Speed-Size", "Color-Size", "Brightness-Size", "Affect-Size",
"Color-Speed", "Brightness-Speed", "Affect-Speed",
"Brightness-Color", "Affect-Color",
"Affect-Brightness")
CollapsedCSV$Comparison <- mapvalues(CollapsedCSV$Comparison,
from= ComparisonsOpp,
to= Comparisons)
## Now we are going to take the columns that have the inducers and concurrents in them and split them- this will allow us to partition the trials into types for matching
IndL<- colsplit(CollapsedCSV$InducerL, split = "-", names = c("IndLDom", "IndLToken", "IndLVal"))
IndR<- colsplit(CollapsedCSV$InducerR, split = "-", names = c("IndRDom", "IndRToken", "IndRVal"))
ConL<- colsplit(CollapsedCSV$ConcurrentL, split = "-", names = c("ConcLDom", "ConcLToken", "ConcLVal"))
ConR<- colsplit(CollapsedCSV$ConcurrentR, split = "-", names = c("ConcRDom", "ConcRToken", "ConcRVal"))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, IndR))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConL))
CollapsedCSV <- data.frame(cbind(CollapsedCSV, ConR))
CollapsedCSV <- CollapsedCSV %>%
unite(TrialType, IndLVal, ConcLVal, sep = "-", remove = FALSE)
CollapsedCSV$TrialType2 <- mapvalues(CollapsedCSV$TrialType,
from= c("H-H", "L-L", "H-L", "L-H"),
to= c(1,1,2,2))
rm(ConL, ConR, IndL, IndR)
############################################################################################################################################
########################## Now we start generating the various types of sample datasets
#### First, a totally random one
# Rbinom generates a list of 0s and 1s the same length of our data frame and sticks this into the new response column
SampleDataRandom <- CollapsedCSV
SampleDataRandom$Response <- rbinom(n=nrow(SampleDataRandom), size = 1, prob = 0.5)
#For Trial Type 2 we need to flip these responses
SampleDataRandom <- SampleDataRandom %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandom$Response2 <- mapvalues(SampleDataRandom$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
##############################
# Generate a random associations for all possible comparisons that are SHARED by all participants
SampleDataRandomAssocShared <- CollapsedCSV
ComparisonsProbs <- rtruncnorm(n=36, a=0, b=1, mean=0.5, sd=0.15)
SampleDataRandomAssocShared$ComparisonsProb <- mapvalues(SampleDataRandomAssocShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataRandomAssocShared$ComparisonsProb <- as.numeric(SampleDataRandomAssocShared$ComparisonsProb)
SampleDataRandomAssocShared$Response <- sapply(SampleDataRandomAssocShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataRandomAssocShared <- SampleDataRandomAssocShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocShared$Response2 <- mapvalues(SampleDataRandomAssocShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
##########################################
# Generate a random association for all possible comparisons - each participant has IDIOSYNCRATIC associations
SampleDataRandomAssocIdio <- CollapsedCSV
SampleDataRandomAssocIdio <- unite(SampleDataRandomAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
Comparisons2 <- unique(SampleDataRandomAssocIdio$IdioAssoc)
ComparisonsProbs <- rtruncnorm(n=length(unique(SampleDataRandomAssocIdio$IdioAssoc)), a=0, b=1, mean=0.5, sd=0.15)
SampleDataRandomAssocIdio$ComparisonsProb <- mapvalues(SampleDataRandomAssocIdio$IdioAssoc,
from= Comparisons2,
to= ComparisonsProbs)
SampleDataRandomAssocIdio$ComparisonsProb <- as.numeric(SampleDataRandomAssocIdio$ComparisonsProb)
SampleDataRandomAssocIdio$Response <- sapply(SampleDataRandomAssocIdio$ComparisonsProb, function(p) rbinom(1, 1, p))
SampleDataRandomAssocIdio <- SampleDataRandomAssocIdio %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandomAssocIdio$Response2 <- mapvalues(SampleDataRandomAssocIdio$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
SampleDataPosAssocShared <- CollapsedCSV
ComparisonsProbs <- rtruncnorm(n=36, a=0.5, b=1, mean=0.75, sd=0.15)
SampleDataPosAssocShared$ComparisonsProb <- mapvalues(SampleDataPosAssocShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataPosAssocShared$ComparisonsProb <- as.numeric(SampleDataPosAssocShared$ComparisonsProb)
SampleDataPosAssocShared$Response <- sapply(SampleDataPosAssocShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataPosAssocShared <- SampleDataPosAssocShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataPosAssocShared$Response2 <- mapvalues(SampleDataPosAssocShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
View(SampleDataPosAssocShared)
SampleDataPosAssocIdio <- CollapsedCSV
SampleDataPosAssocIdio <- unite(SampleDataPosAssocIdio, IdioAssoc, Id, Comparison, sep = "-", remove = FALSE)
Comparisons2 <- unique(SampleDataPosAssocIdio$IdioAssoc)
ComparisonsProbs <- rtruncnorm(n=length(unique(SampleDataPosAssocIdio$IdioAssoc)), a=0.5, b=1, mean=0.75, sd=0.15)
SampleDataPosAssocIdio$ComparisonsProb <- mapvalues(SampleDataPosAssocIdio$IdioAssoc,
from= Comparisons2,
to= ComparisonsProbs)
SampleDataPosAssocIdio$ComparisonsProb <- as.numeric(SampleDataPosAssocIdio$ComparisonsProb)
SampleDataPosAssocIdio$Response <- sapply(SampleDataPosAssocIdio$ComparisonsProb, function(p) rbinom(1, 1, p))
SampleDataPosAssocIdio <- SampleDataPosAssocIdio %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataPosAssocIdio$Response2 <- mapvalues(SampleDataPosAssocIdio$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
PitchAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
PitchAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)##################################################################################################
Comparisons
PitchAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
AmpAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
NoiseAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
ShapeAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
SizeAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
ColorAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
BrightnessAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
SpeedAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
PitchNoise <- average(PitchAffect, NoiseAffect)
PitchNoise <- mean(PitchAffect, NoiseAffect)
SampleDataRandAffectShared <- CollapsedCSV
PitchAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
AmpAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
NoiseAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
ShapeAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
SizeAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
SpeedAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
ColorAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
BrightnessAffect <- rtruncnorm(n=1, a=0.0, b=1, mean=0.5, sd=0.15)
PitchAmp <- mean(PitchAffect, AmpAffect)
PitchNoise <- mean(PitchAffect, NoiseAffect)
PitchShape <- mean(PitchAffect, ShapeAffect)
PitchSize <- mean(PitchAffect, SizeAffect)
PitchSpeed <- mean(PitchAffect, SpeedAffect)
PitchColor <- mean(PitchAffect, ColorAffect)
PitchBrightness <- mean(PitchAffect, BrightnessAffect)
AmpNoise <- mean(AmpAffect, NoiseAffect)
AmpShape <- mean(AmpAffect, ShapeAffect)
AmpSize <- mean(AmpAffect, SizeAffect)
AmpSpeed <- mean(AmpAffect, SpeedAffect)
AmpColor <- mean(AmpAffect, ColorAffect)
AmpBrightness <- mean(AmpAffect, BrightnessAffect)
NoiseShape <- mean(NoiseAffect, ShapeAffect)
NoiseSize <- mean(NoiseAffect, SizeAffect)
NoiseSpeed <- mean(NoiseAffect, SpeedAffect)
NoiseColor <- mean(NoiseAffect, ColorAffect)
NoiseBrightness <- mean(NoiseAffect, BrightnessAffect)
ShapeSize <- mean(ShapeAffect, SizeAffect)
ShapeSpeed <- mean(ShapeAffect, SpeedAffect)
ShapeColor <- mean(ShapeAffect, ColorAffect)
ShapeBrightness <- mean(ShapeAffect, BrightnessAffect)
SizeSpeed <- mean(SizeAffect, SpeedAffect)
SizeColor <- mean(SizeAffect, ColorAffect)
SizeBrightness <- mean(SizeAffect, BrightnessAffect)
SpeedColor <- mean(SpeedAffect, ColorAffect)
SpeedBrightness <- mean(SpeedAffect, BrightnessAffect)
ColorBrightness <- mean(SpeedAffect, BrightnessAffect)
ComparisonsProbs <- c(PitchAmp, PitchNoise, PitchShape, PitchSize, PitchSpeed, PitchColor, PitchBrightness, PitchAffect,
AmpNoise, AmpShape, AmpSize, AmpSpeed, AmpColor, AmpBrightness, AmpAffect,
NoiseShape, NoiseSize, NoiseSpeed, NoiseColor, NoiseBrightness, NoiseAffect,
ShapeSize, ShapeSpeed, ShapeColor, ShapeBrightness, ShapeAffect,
SizeSpeed, SizeColor, SizeBrightness, SizeAffect,
SpeedColor, SpeedBrightness, SpeedAffect,
ColorBrightness, ColorAffect,
BrightnessAffect
)
PitchAmp
rm(PitchAmp, PitchNoise, PitchShape, PitchSize, PitchSpeed, PitchColor, PitchBrightness, PitchAffect,
AmpNoise, AmpShape, AmpSize, AmpSpeed, AmpColor, AmpBrightness, AmpAffect,
NoiseShape, NoiseSize, NoiseSpeed, NoiseColor, NoiseBrightness, NoiseAffect,
ShapeSize, ShapeSpeed, ShapeColor, ShapeBrightness, ShapeAffect,
SizeSpeed, SizeColor, SizeBrightness, SizeAffect,
SpeedColor, SpeedBrightness, SpeedAffect,
ColorBrightness, ColorAffect,
BrightnessAffect)
rm(files, temp)
files
SampleDataRandAffectShared$ComparisonsProb <- mapvalues(SampleDataRandAffectShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataRandAffectShared$ComparisonsProb <- as.numeric(SampleDataRandAffectShared$ComparisonsProb)
SampleDataRandAffectShared$Response <- sapply(SampleDataRandAffectShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataRandAffectShared <- SampleDataRandAffectShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataRandAffectShared$Response2 <- mapvalues(SampleDataRandAffectShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
View(SampleDataRandAffectShared)
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
unique(CollapsedCSV$Id)
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
SampleDataPosAffectShared <- CollapsedCSV
PitchAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
AmpAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
NoiseAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
ShapeAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
SizeAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
SpeedAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
ColorAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
BrightnessAffect <- rtruncnorm(n=1, a=0.50, b=1, mean=0.75, sd=0.15)
PitchAmp <- mean(PitchAffect, AmpAffect)
PitchNoise <- mean(PitchAffect, NoiseAffect)
PitchShape <- mean(PitchAffect, ShapeAffect)
PitchSize <- mean(PitchAffect, SizeAffect)
PitchSpeed <- mean(PitchAffect, SpeedAffect)
PitchColor <- mean(PitchAffect, ColorAffect)
PitchBrightness <- mean(PitchAffect, BrightnessAffect)
AmpNoise <- mean(AmpAffect, NoiseAffect)
AmpShape <- mean(AmpAffect, ShapeAffect)
AmpSize <- mean(AmpAffect, SizeAffect)
AmpSpeed <- mean(AmpAffect, SpeedAffect)
AmpColor <- mean(AmpAffect, ColorAffect)
AmpBrightness <- mean(AmpAffect, BrightnessAffect)
NoiseShape <- mean(NoiseAffect, ShapeAffect)
NoiseSize <- mean(NoiseAffect, SizeAffect)
NoiseSpeed <- mean(NoiseAffect, SpeedAffect)
NoiseColor <- mean(NoiseAffect, ColorAffect)
NoiseBrightness <- mean(NoiseAffect, BrightnessAffect)
ShapeSize <- mean(ShapeAffect, SizeAffect)
ShapeSpeed <- mean(ShapeAffect, SpeedAffect)
ShapeColor <- mean(ShapeAffect, ColorAffect)
ShapeBrightness <- mean(ShapeAffect, BrightnessAffect)
SizeSpeed <- mean(SizeAffect, SpeedAffect)
SizeColor <- mean(SizeAffect, ColorAffect)
SizeBrightness <- mean(SizeAffect, BrightnessAffect)
SpeedColor <- mean(SpeedAffect, ColorAffect)
SpeedBrightness <- mean(SpeedAffect, BrightnessAffect)
ColorBrightness <- mean(SpeedAffect, BrightnessAffect)
ComparisonsProbs <- c(PitchAmp, PitchNoise, PitchShape, PitchSize, PitchSpeed, PitchColor, PitchBrightness, PitchAffect,
AmpNoise, AmpShape, AmpSize, AmpSpeed, AmpColor, AmpBrightness, AmpAffect,
NoiseShape, NoiseSize, NoiseSpeed, NoiseColor, NoiseBrightness, NoiseAffect,
ShapeSize, ShapeSpeed, ShapeColor, ShapeBrightness, ShapeAffect,
SizeSpeed, SizeColor, SizeBrightness, SizeAffect,
SpeedColor, SpeedBrightness, SpeedAffect,
ColorBrightness, ColorAffect,
BrightnessAffect)
rm(PitchAmp, PitchNoise, PitchShape, PitchSize, PitchSpeed, PitchColor, PitchBrightness, PitchAffect,
AmpNoise, AmpShape, AmpSize, AmpSpeed, AmpColor, AmpBrightness, AmpAffect,
NoiseShape, NoiseSize, NoiseSpeed, NoiseColor, NoiseBrightness, NoiseAffect,
ShapeSize, ShapeSpeed, ShapeColor, ShapeBrightness, ShapeAffect,
SizeSpeed, SizeColor, SizeBrightness, SizeAffect,
SpeedColor, SpeedBrightness, SpeedAffect,
ColorBrightness, ColorAffect,
BrightnessAffect)
SampleDataPosAffectShared$ComparisonsProb <- mapvalues(SampleDataPosAffectShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataPosAffectShared$ComparisonsProb <- as.numeric(SampleDataPosAffectShared$ComparisonsProb)
SampleDataPosAffectShared$Response <- sapply(SampleDataPosAffectShared$ComparisonsProb, function(p) rbinom(1, 1, p))
#For Trial Type 2 we need to flip these responses
SampleDataPosAffectShared <- SampleDataPosAffectShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataPosAffectShared$Response2 <- mapvalues(SampleDataPosAffectShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
rm(temp)
rm(files)
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
Comparisons
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
SampleDataAlanShared <- CollapsedCSV
ComparisonsProbs <- c(0.75, 0.6, 0.75, 0.9, 0.9, 0.5, 0.75, 0.75,
0.6, 0.5, 0.9, 0.6, 0.6, 0.6, 0.6,
0.9,0.6, 0.5, 0.5, 0.4, 0.5,
0.4, 0.4, 0.5, 0.6, 0.6,
0.25, 0.5, 0.5, 0.5,
0.75, 0.75, 0.6,
0.5, 0.5,
0.75)
SampleDataAlanShared$ComparisonsProb <- mapvalues(SampleDataAlanShared$Comparison,
from= Comparisons,
to= ComparisonsProbs)
SampleDataAlanShared$ComparisonsProb <- as.numeric(SampleDataAlanShared$ComparisonsProb)
SampleDataAlanShared$Response <- sapply(SampleDataAlanShared$ComparisonsProb, function(p) rbinom(1, 1, p))
SampleDataAlanShared <- SampleDataAlanShared %>%
unite(ResponseX, TrialType2, Response, sep = "-", remove = FALSE)
SampleDataAlanShared$Response2 <- mapvalues(SampleDataAlanShared$ResponseX,
from= c("1-1", "1-0", "2-1", "2-0"),
to= c(1,0,0,1))
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
setwd(file.path(mainPath, 'data/sampledata'))
write.csv(SampleDataRandom, file= "SampleData-Random.csv")
write.csv(SampleDataRandomAssocShared, file= "SampleData-Random Shared Associations.csv")
write.csv(SampleDataRandomAssocIdio, file= "SampleData-Random Idiosyncratic Associations.csv")
write.csv(SampleDataPosAssocShared, file= "SampleData-Positive Shared Associations.csv")
write.csv(SampleDataPosAssocIdio, file= "SampleData-Positive Idiosyncratic Associations.csv")
write.csv(SampleDataRandAffectShared, file= "SampleData-Random Affect Shared Associations.csv")
write.csv(SampleDataRandAffectIdio, file= "SampleData-Random Affect IdioSyncratic Associations.csv")
write.csv(SampleDataAlanAffectShared, file= "SampleData-Alan Affect Shared Associations.csv")
write.csv(SampleDataAlanShared, file= "SampleData-Alan Shared Associations.csv")
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
source('D:/Google Drive/Experiments/MPI Experiments/Crossmodality Toolkit/SimulatoR.R')
