cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
library(plyr)
library(tidyverse)
View(cleandata)
cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
data <- subset(cleandata, DataSet == "Pilot")  ##Change as appropriate
library(plyr)
library(tidyverse)
View(data)
mean(11,7,6)
ggplot(data, aes(sample = Response, colour= condition)) +
stat_qq(aes(shape = condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
ggplot(data, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
ggplot(data, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Subject, data = data, mean)
View(data)
View(dataagg1)
unique(dataagg1$Response)
dataagg1 <- aggregate(Response ~ Comparison + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg2 <- aggregate(Response ~ Condition + Subject, data = data, mean)
ggplot(dataagg2, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg1 <- aggregate(Response ~ Comparison + Condition + Subject, data = data, mean)
ggplot(dataagg1, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg2 <- aggregate(Response ~ Condition + Subject, data = data, mean)
ggplot(dataagg2, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
dataagg3 <- aggregate(Response ~ Comparison + Condition, data = data, mean)
ggplot(dataagg3, aes(sample = Response, colour= Condition)) +
stat_qq(aes(shape = Condition))+
ggtitle("qq Plots of Data by Condition") +
labs(x="", y="") +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
View(dataagg3)
xtabs
xtabs(Response ~ Comparison, data=data)
View(dataagg3)
means<- as.data.frame(xtabs(Response ~ Comparison, data=dataagg3))
means<- as.data.frame(xtabs(Response ~ Comparison, data=dataagg3))
dataagg4 <- aggregate(Response~Comparison, data=data)
dataagg4 <- aggregate(Response~Comparison, data=data, mean)
means<- as.data.frame(xtabs(Response ~ Comparison, data=dataagg4))
dataagg4 <- aggregate(Response~Comparison, data=data, mean)
means<- as.data.frame(xtabs(Response ~ Comparison, data=dataagg4))
means
CleanDataAgg <- summaryBy(Response ~
DataSet + Inducer + Concurrent + Comparison,
data= cleanData, Fun = c(mean))
CleanDataAgg <- aggregate(Response ~
DataSet + Inducer + Concurrent + Comparison,
data= cleanData, mean))
CleanDataAgg <- aggregate(Response ~
DataSet + Inducer + Concurrent + Comparison,
data= cleanData, mean))
View(cleandata)
CleanDataAgg <- aggregate(Response ~ DataSet + Inducer + Concurrent + Comparison,
data= cleanData, mean)
CleanDataAgg <- aggregate(Response ~ DataSet + Inducer + Concurrent + Comparison,
data= cleandata, mean)
Domains <- sort(unique(CleanDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
CleanDataAgg$Inducer2 <- mapvalues(CleanDataAgg$Inducer, from = Domains, to= HighValues)
CleanDataAgg$Concurrent2 <- mapvalues(CleanDataAgg$Concurrent, from = Domains, to= HighValues)
PilotDataAgg <- subset(CleanDataAgg, DataSet == "Pilot")
CleanDataAgg <- aggregate(Response ~ DataSet + Inducer + Concurrent + Comparison,
data= cleandata, mean)
Domains <- sort(unique(CleanDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
CleanDataAgg$Inducer2 <- mapvalues(CleanDataAgg$Inducer, from = Domains, to= HighValues)
CleanDataAgg$Concurrent2 <- mapvalues(CleanDataAgg$Concurrent, from = Domains, to= HighValues)
#FullDataAgg <- subset(CleanDataAgg, DataSet == "Full")
PilotDataAgg <- subset(CleanDataAgg, DataSet == "Pilot")
ggplot(data= PilotDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Pilot Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
View(PilotDataAgg)
View(PilotDataAgg)
CleanDataAgg <- aggregate(Response ~ DataSet + Inducer + Concurrent + Comparison,
data= cleandata, mean)
Domains <- sort(unique(CleanDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
CleanDataAgg$Inducer2 <- mapvalues(CleanDataAgg$Inducer, from = Domains, to= HighValues)
CleanDataAgg$Concurrent2 <- mapvalues(CleanDataAgg$Concurrent, from = Domains, to= HighValues)
PilotDataAgg <- subset(CleanDataAgg, DataSet == "Pilot")
ggplot(data= PilotDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Pilot Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
FullDataAgg <- subset(CleanDataAgg, DataSet == "Simulated")
ggplot(data= PilotDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Pilot Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
CleanDataAgg <- aggregate(Response ~ DataSet + Inducer + Concurrent + Comparison,
data= cleandata, mean)
Domains <- sort(unique(CleanDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
CleanDataAgg$Inducer2 <- mapvalues(CleanDataAgg$Inducer, from = Domains, to= HighValues)
CleanDataAgg$Concurrent2 <- mapvalues(CleanDataAgg$Concurrent, from = Domains, to= HighValues)
PilotDataAgg <- subset(CleanDataAgg, DataSet == "Pilot")
ggplot(data= PilotDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Pilot Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
FullDataAgg <- subset(CleanDataAgg, DataSet == "Simulated")
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Pilot Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
DiffDataAgg <- FullDataAgg
DiffDataAgg$DataSet <- "Difference"
DiffDataAgg$Response <- FullDataAgg$Response - PilotDataAgg$Response
View(DiffDataAgg)
DiffDataAgg <- FullDataAgg
DiffDataAgg$DataSet <- "Difference"
DiffDataAgg$Response <- abs(FullDataAgg$Response - PilotDataAgg$Response)
ggplot(data= DiffDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Mismatch Between Imputed and Actual Values") +
scale_fill_gradient2(low = "white", high = "red",
name="Mismatch") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
ggplot(data= DiffDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Response)) +
geom_tile(color = "white") +
ggtitle("Biases - Mismatch Between Imputed and Actual Values") +
scale_fill_gradient2(low = "white", high = "red",
name="Mismatch") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
View(FullDataAgg)
library(powerAnalysis)
comparisons <- sort(unique(data$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
library(powerAnalysis)
comparisons <- sort(unique(data$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
for(comparison in comparisons){
testdata <- subset(data, Comparison == comparison)
testres <- wilcox.test(data$Response, mu= 0.5, alternative = "two.sided")
pval <- testres$p.value
pvals <- c(pvals, pval)
testZ <- qnorm(pval/2)
zvals <- c(zvals, testZ)
teststat <- abs(testZ / (sqrt(nrow(testdata))))
statvals <- c(statvals, teststat)
}
RespDataAgg$pValue <- as.numeric(pvals)
FullDataAgg$pValue <- as.numeric(pvals)
FullDataAgg$ZValue <- as.numeric(zvals)
FullDataAgg$effsize <- as.numeric(statvals)
View(FullDataAgg)
FullData <- summaryBy(Response ~
Subject + DataSet + Condition +
Inducer + Concurrent + Comparison,
data= data, Fun = c(mean))
cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
data <- subset(cleandata, DataSet == "Pilot")  ##Change as appropriate
library(plyr)
library(tidyverse)
library(doBy)
FullData <- summaryBy(Response ~
Subject + DataSet + Condition +
Inducer + Concurrent + Comparison,
data= data, Fun = c(mean))
library(powerAnalysis)
comparisons <- sort(unique(FullData$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
for(comparison in comparisons){
testdata <- subset(data, Comparison == comparison)
testres <- wilcox.test(FullData$Response, mu= 0.5, alternative = "two.sided")
pval <- testres$p.value
pvals <- c(pvals, pval)
testZ <- qnorm(pval/2)
zvals <- c(zvals, testZ)
teststat <- abs(testZ / (sqrt(nrow(testdata))))
statvals <- c(statvals, teststat)
}
FullDataAgg$pValue <- as.numeric(pvals)
FullDataAgg$ZValue <- as.numeric(zvals)
FullDataAgg$effsize <- as.numeric(statvals)
View(FullDataAgg)
FullData <- summaryBy(Response ~
Subject + DataSet + Condition +
Inducer + Concurrent + Comparison,
data= data, Fun = c(mean))
library(powerAnalysis)
comparisons <- sort(unique(FullData$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
for(comparison in comparisons){
testdata <- subset(FullData, Comparison == comparison)
testres <- wilcox.test(FullData$Response, mu= 0.5, alternative = "two.sided")
pval <- testres$p.value
pvals <- c(pvals, pval)
testZ <- qnorm(pval/2)
zvals <- c(zvals, testZ)
teststat <- abs(testZ / (sqrt(nrow(testdata))))
statvals <- c(statvals, teststat)
}
FullDataAgg$pValue <- as.numeric(pvals)
FullDataAgg$ZValue <- as.numeric(zvals)
FullDataAgg$effsize <- as.numeric(statvals)
View(FullDataAgg)
FullData <- summaryBy(Response ~
Subject + DataSet + Condition +
Inducer + Concurrent + Comparison,
data= data, Fun = c(mean))
library(powerAnalysis)
comparisons <- sort(unique(FullData$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
for(comparison in comparisons){
testdata <- subset(FullData, Comparison == comparison)
testres <- wilcox.test(testdata$Response, mu= 0.5, alternative = "two.sided")
pval <- testres$p.value
pvals <- c(pvals, pval)
testZ <- qnorm(pval/2)
zvals <- c(zvals, testZ)
teststat <- abs(testZ / (sqrt(nrow(testdata))))
statvals <- c(statvals, teststat)
}
FullDataAgg$pValue <- as.numeric(pvals)
FullDataAgg$ZValue <- as.numeric(zvals)
FullDataAgg$effsize <- as.numeric(statvals)
View(FullData)
View(FullDataAgg)
RespDataAgg$effsize <- ifelse(RespDataAgg$Response.mean.mean < 0.5,
RespDataAgg$effsize * -1,
RespDataAgg$effsize)
FullDataAgg$effsize <- ifelse(FullDataAgg$Response.mean.mean < 0.5,
FullDataAgg$effsize * -1,
FullDataAgg$effsize)
FullDataAgg$effsize <- ifelse(FullDataAgg$Response < 0.5,
FullDataAgg$effsize * -1,
FullDataAgg$effsize)
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
View(FullDataAgg)
View(FullDataAgg)
FullDataAgg$correctedP <- FullDataAgg$pValue * 93
FullDataAgg$effsize2 <- ifelse(FullDataAgg$correctedP > 0.05,
"NA",
FullDataAgg$correctedP)
View(FullDataAgg)
FullDataAgg$correctedP <- FullDataAgg$pValue * 93
FullDataAgg$effsize2 <- ifelse(FullDataAgg$correctedP > 0.05,
"NA",
FullDataAgg$correctedP)
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize2, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
str(FullDataAgg)
FullDataAgg$effsize2 <- as.numeric(ifelse(FullDataAgg$correctedP > 0.05,
"NA",
FullDataAgg$correctedP))
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize2, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
FullDataAgg$correctedP <- FullDataAgg$pValue * 93
FullDataAgg$effsize2 <- as.numeric(ifelse(FullDataAgg$correctedP > 0.05,
"NA",
FullDataAgg$effsize))
ggplot(data= FullDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
pilotdata <- subset(cleandata, DataSet == "Pilot")  ##Change as appropriate
write.csv(pilotdata, "F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/pilotdata.csv)
)
pilotdata <- subset(cleandata, DataSet == "Pilot")  ##Change as appropriate
write.csv(pilotdata, "F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
write.csv(pilotdata, "F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/pilotdata.csv")
cleandata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/cleandata.csv")
pilotdata <- read.csv(
"F:/Google Drive/GitHub Repos/STE-PHEN/summer_school_sessions/11_descriptive_stats/pilotdata.csv")
cleandata<- rbind(cleandata, pilotdata)
View(cleandata)
View(pilotdata)
View(cleandata)
unique(cleandata$DataSet)
