Predictions$Inducer2 <- mapvalues(Predictions$Inducer, from = Domains, to= HighValues)
Predictions$Concurrent2 <- mapvalues(Predictions$Concurrent, from = Domains, to= HighValues)
Predictions$Inducer2 <- factor(Predictions$Inducer2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Concurrent2 <- factor(Predictions$Concurrent2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Prediction <-as.numeric(Predictions$Prediction)
ggplot(data= Predictions, aes(x=Concurrent2, y=Inducer2, fill=Prediction)) +
geom_tile(color = "white") +
ggtitle("Biases - My Predictions") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
#### REPLACE THIS WITH YOUR EDITED FILE
myPWide <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Wide-Sample.csv")
myPWide
colnames(myPWide) <- c("Inducer", "Affect EB", "Affect HS", "Affect PD", "Affect SC",
"Pitch", "Amplitude", "Noise", "Size", "Shape", "Speed", "Brightness",
"Color RB", "Color RG", "Color RY", "Color YB")
myPLong <- melt(myPWide,
variable.name = "Concurrent",
value.name = "Prediction",
id.vars = "Inducer")
myPLong <- separate(data=myPLong, col= Inducer,     #split columns back up for subsetting
into= c("IndType", "IndToken"), sep = " ", remove = FALSE)
myPLong <- separate(data=myPLong, col= Concurrent,
into= c("ConType", "ConToken"), sep = " ", remove = FALSE)
myPLong <- subset(myPLong, IndType != ConType)
# Code the comparison column into the SSData frame
myPLong$IndCon <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$ConInd <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$Comparison <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-') #Make a comparison column
myPLong <- arrange(myPLong, Comparison)  # Order the data frame alphabetically by the comparison column
delRows = NULL # the rows to be removed
for(i in 1:nrow(myPLong)){
j = which(myPLong$Inducer == myPLong$Concurrent[i] & myPLong$Concurrent == myPLong$Inducer[i])
j = j [j > i]
if (length(j) > 0){
delRows = c(delRows, j)
}
}
myPLong <- myPLong[-delRows,]
myPLong <- subset(myPLong, select = c(Inducer, Concurrent, Comparison, Prediction))
write.csv(myPLong, "F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Long-YOURNAME.csv")
ImputedPredictions <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/MyImputedPredictions.csv")
ImputedPredictions <- subset(ImputedPredictions, select = c(Comparison, ImputedPrediction))
ImputedPredictions <- separate(data = ImputedPredictions, col = Comparison,
into = c("Left", "Right"),
sep = "-", remove = FALSE)
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
#### REPLACE THIS WITH YOUR EDITED FILE
myPWide <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Wide-Sample.csv")
myPWide
colnames(myPWide) <- c("Inducer", "Affect EB", "Affect HS", "Affect PD", "Affect SC",
"Pitch", "Amplitude", "Noise", "Size", "Shape", "Speed", "Brightness",
"Color RB", "Color RG", "Color RY", "Color YB")
myPLong <- melt(myPWide,
variable.name = "Concurrent",
value.name = "Prediction",
id.vars = "Inducer")
myPLong <- separate(data=myPLong, col= Inducer,     #split columns back up for subsetting
into= c("IndType", "IndToken"), sep = " ", remove = FALSE)
myPLong <- separate(data=myPLong, col= Concurrent,
into= c("ConType", "ConToken"), sep = " ", remove = FALSE)
myPLong <- subset(myPLong, IndType != ConType)
# Code the comparison column into the SSData frame
myPLong$IndCon <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$ConInd <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$Comparison <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-') #Make a comparison column
myPLong <- arrange(myPLong, Comparison)  # Order the data frame alphabetically by the comparison column
delRows = NULL # the rows to be removed
for(i in 1:nrow(myPLong)){
j = which(myPLong$Inducer == myPLong$Concurrent[i] & myPLong$Concurrent == myPLong$Inducer[i])
j = j [j > i]
if (length(j) > 0){
delRows = c(delRows, j)
}
}
myPLong <- myPLong[-delRows,]
myPLong <- subset(myPLong, select = c(Inducer, Concurrent, Comparison, Prediction))
write.csv(myPLong, "F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Long-YOURNAME.csv")
myPLong <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Long-YOURNAME.csv")
Predictions <- separate(data = myPLong, col = Comparison,
into = c("Left", "Right"),
sep = "-", remove = FALSE)
Pred1 <- Predictions
Pred2 <- Predictions
Pred1$Inducer <- Pred1$Left
Pred1$Concurrent <- Pred1$Right
Pred2$Inducer <- Pred2$Right
Pred2$Concurrent <- Pred2$Left
Predictions <- rbind(Pred1, Pred2)
Predictions <- subset(Predictions, select = c("Inducer", "Concurrent", "Comparison", "Prediction"))
Domains <- sort(unique(Predictions$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
Predictions$Inducer2 <- mapvalues(Predictions$Inducer, from = Domains, to= HighValues)
Predictions$Concurrent2 <- mapvalues(Predictions$Concurrent, from = Domains, to= HighValues)
Predictions$Inducer2 <- factor(Predictions$Inducer2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Concurrent2 <- factor(Predictions$Concurrent2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Prediction <-as.numeric(Predictions$Prediction)
ggplot(data= Predictions, aes(x=Concurrent2, y=Inducer2, fill=Prediction)) +
geom_tile(color = "white") +
ggtitle("Biases - My Predictions") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
ImputedPredictions <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/MyImputedPredictions.csv")
ImputedPredictions <- subset(ImputedPredictions, select = c(Comparison, ImputedPrediction))
ImputedPredictions <- separate(data = ImputedPredictions, col = Comparison,
into = c("Left", "Right"),
sep = "-", remove = FALSE)
Pred1 <- ImputedPredictions
Pred2 <- ImputedPredictions
Pred1$Inducer <- Pred1$Left
Pred1$Concurrent <- Pred1$Right
Pred2$Inducer <- Pred2$Right
Pred2$Concurrent <- Pred2$Left
ImputedPredictions <- rbind(Pred1, Pred2)
Domains <- sort(unique(ImputedPredictions$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
ImputedPredictions$Inducer2 <- mapvalues(ImputedPredictions$Inducer, from = Domains, to= HighValues)
ImputedPredictions$Concurrent2 <- mapvalues(ImputedPredictions$Concurrent, from = Domains, to= HighValues)
ImputedPredictions$Inducer2 <- factor(ImputedPredictions$Inducer2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
ImputedPredictions$Concurrent2 <- factor(ImputedPredictions$Concurrent2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
ggplot(data= ImputedPredictions, aes(x=Concurrent2, y=Inducer2, fill=ImputedPrediction)) +
geom_tile(color = "white") +
ggtitle("Biases - My Imputed Predictions") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
simdata <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/SimDataFilled.csv")
simdataAgg <- summaryBy(ResponseSimulated ~
DataSet + Inducer + Concurrent + Comparison,
data= simdata, Fun = c(mean))
Domains <- sort(unique(simdataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
simdataAgg$Inducer2 <- mapvalues(simdataAgg$Inducer, from = Domains, to= HighValues)
simdataAgg$Concurrent2 <- mapvalues(simdataAgg$Concurrent, from = Domains, to= HighValues)
ggplot(data= simdataAgg, aes(x=Concurrent2, y=Inducer2, fill=ResponseSimulated.mean)) +
geom_tile(color = "white") +
ggtitle("Biases - Simulated Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
Predictions <- arrange(Predictions, Comparison)
ImputedPredictions <- arrange(ImputedPredictions, Comparison)
simdataAgg <- arrange(simdataAgg, Comparison)
TheOne <- subset(Predictions, select = c(Inducer2, Concurrent2, Prediction))
TheOne$ImputedPrediction <- ImputedPredictions$ImputedPrediction
TheOne$SimData <- simdataAgg$ResponseSimulated.mean
TheOne <- melt(TheOne,
variable.name = "Source",
id.vars = c ("Inducer2", "Concurrent2"))
ggplot(data= TheOne, aes(x=Concurrent2, y=Inducer2, fill=value)) +
geom_tile(color = "white") +
ggtitle("Biases - Affect Data") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
facet_wrap(~Source, nrow =3)
coord_fixed()
View(TheOne)
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
library(scales)
library(lmerTest)
CleanData <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/CleanData.csv")
simdata <- subset(CleanData, DataSet == "Simulated")
pilotdata <- subset(CleanData, DataSet == "Pilot")
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
library(scales)
library(lmerTest)
CleanData <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/CleanData.csv")
simdata <- subset(CleanData, DataSet == "Simulated")
pilotdata <- subset(CleanData, DataSet == "Pilot")
# Getting rid of numerical response column that we aren't using
CorrData <- subset(pilotdata, select = -c(Response))
# Melting data
CorrData <- melt(CorrData,
variable.name = "Prediction",
id.vars = c("DataSet", "Subject", "Condition", "TrialNum", "Inducer",
"Concurrent", "Comparison"))
# Aggregating Data
CorrDataAgg <- aggregate(value ~ Prediction + Subject + Condition + Inducer + Concurrent + Comparison,
CorrData, mean)
FullModel <- glmer(value ~ Prediction + (1|Subject), data = CorrDataAgg, family = binomial )
summary(FullModel)
anova(FullModel)
View(pilotdata)
conditions <- unique(pilotdata$Condition)
conditions
conditions <- as.vector(unique(pilotdata$Condition))
conditions
testdata <- subset(pilotdata, Condition == "Noise-Shape-Speed")
FullModel$condition <- glmer(value ~ Prediction * Comparison + (1|Subject), data = testdata, family = binomial )
View(testdata)
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
library(scales)
library(lmerTest)
CleanData <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/CleanData.csv")
simdata <- subset(CleanData, DataSet == "Simulated")
pilotdata <- subset(CleanData, DataSet == "Pilot")
# Getting rid of numerical response column that we aren't using
CorrData <- subset(pilotdata, select = -c(Response))
# Melting data
CorrData <- melt(CorrData,
variable.name = "Prediction",
id.vars = c("DataSet", "Subject", "Condition", "TrialNum", "Inducer",
"Concurrent", "Comparison"))
# Aggregating Data
CorrDataAgg <- aggregate(value ~ Prediction + Subject + Condition + Inducer + Concurrent + Comparison,
CorrData, mean)
testdata <- subset(CorrDataAgg, Condition == "Noise-Shape-Speed")
FullModel$condition <- glmer(value ~ Prediction * Comparison + (1|Subject), data = testdata, family = binomial )
View(CorrDataAgg)
FullModel<- glmer(value ~ Prediction + (1|Subject), data = testdata, family = binomial )
FullModel$condition <- glmer(value ~ Prediction + (1|Subject), data = testdata, family = binomial )
FullModel
FullModel$condition
FullModel <- glmer(value ~ Prediction * Comparison + (1|Subject), data = testdata, family = binomial )
# Getting rid of numerical response column that we aren't using
CorrData <- subset(simdata, select = -c(Response))
# Melting data
CorrData <- melt(CorrData,
variable.name = "Prediction",
id.vars = c("DataSet", "Subject", "Condition", "TrialNum", "Inducer",
"Concurrent", "Comparison"))
# Aggregating Data
CorrDataAgg <- aggregate(value ~ Prediction + Subject + Condition + Inducer + Concurrent + Comparison,
CorrData, mean)
testdata <- subset(CorrDataAgg, Condition == "Noise-Shape-Speed")
FullModel <- glmer(value ~ Prediction * Comparison + (1|Subject), data = testdata, family = binomial )
View(CorrDataAgg)
conditions <- as.vector(unique(CorrDataAgg$Condition))
conditions
testdata <- subset(CorrDataAgg, Condition == "Amp Size Speed")
FullModel <- glmer(value ~ Prediction * Comparison + (1|Subject), data = testdata, family = binomial )
conditions <- as.vector(unique(CorrDataAgg$Condition))
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glmer(value ~ Prediction * Inducer + (1|Subject), data = testdata, family = binomial )
summary(FullModel)
anova(FullModel)
}
FullModel <- glmer(value ~ Prediction * Inducer + (1|Subject), data = testdata, family = binomial )
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
FullModel
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
summary(FullModel)
anova(FullModel)
}
conditions <- as.vector(unique(CorrDataAgg$Condition))
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
FullModel
}
conditions <- as.vector(unique(CorrDataAgg$Condition))
models <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
models <- c(models, FullModel)
}
models
conditions <- as.vector(unique(CorrDataAgg$Condition))
aovs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
aov <- anova(FullModel)
aovs <- c(aovs, aov)
}
aovs
aov <- anova(FullModel)
aov
conditions <- as.vector(unique(CorrDataAgg$Condition))
summaries <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
summary <- summary(FullModel)
summaries <- c(summaries, summary)
}
summaries
summary <- as.data.frame(summary(FullModel))
summary <- data.frame(summary(FullModel))
summary
conditions <- as.vector(unique(CorrDataAgg$Condition))
summaries <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
summary <- summary(FullModel)
summaries <- c(summaries, summary)
}
summaries[1]
summaries[1:17]
head(summaries)
coeff(summary(FullModel))
coe\f(summary(FullModel))
coef(summary(FullModel))
as.data.frame(coef(summary(FullModel)))
conditions <- as.vector(unique(CorrDataAgg$Condition))
coefs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
coef <- summary(FullModel)
coefs <- c(coefs, coef)
}
coefs
conditions <- as.vector(unique(CorrDataAgg$Condition))
coefs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
coef <- summary(FullModel)
coefs <- rbind(coefs, coef)
}
View(coefs)
coef <- summary(FullModel)
conditions <- as.vector(unique(CorrDataAgg$Condition))
coefs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
coef <- coef(summary(FullModel))
coefs <- rbind(coefs, coef)
}
View(coefs)
1080/6
View(coefs)
conditions <- as.vector(unique(CorrDataAgg$Condition))
coefs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
coef <- as.data.frame(coef(summary(FullModel)))
coefs <- rbind(coefs, coef)
}
View(coefs)
270/6
conditions <- as.vector(unique(CorrDataAgg$Condition))
coefs <- list()
for(condition in conditions){
testdata <- subset(CorrDataAgg, Condition == condition)
#specify models and comparisons here- e.g.
FullModel <- glm(value ~ Prediction * Inducer, data = testdata, family = binomial )
coef <- as.data.frame(coef(summary(FullModel)))
coefs <- rbind(coefs, coef)
}
CoefSplit <- split(coefs, rep(1:6, each= 45))
CoefSplit$'1'
CoefSplit$'2'
CoefSplit$'3'
CoefSplit$'4'
CoefSplit$'5'
CoefSplit$'6'
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
#### REPLACE THIS WITH YOUR EDITED FILE
myPWide <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Wide-Sample.csv")
myPWide
colnames(myPWide) <- c("Inducer", "Affect EB", "Affect HS", "Affect PD", "Affect SC",
"Pitch", "Amp", "Noise", "Size", "Shape", "Speed", "Brightness",
"Color RB", "Color RG", "Color RY", "Color YB")
myPLong <- melt(myPWide,
variable.name = "Concurrent",
value.name = "Prediction",
id.vars = "Inducer")
myPLong <- separate(data=myPLong, col= Inducer,     #split columns back up for subsetting
into= c("IndType", "IndToken"), sep = " ", remove = FALSE)
myPLong <- separate(data=myPLong, col= Concurrent,
into= c("ConType", "ConToken"), sep = " ", remove = FALSE)
myPLong <- subset(myPLong, IndType != ConType)
# Code the comparison column into the SSData frame
myPLong$IndCon <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$ConInd <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-')
myPLong$Comparison <- paste(myPLong$Inducer, myPLong$Concurrent, sep = '-') #Make a comparison column
myPLong <- arrange(myPLong, Comparison)  # Order the data frame alphabetically by the comparison column
delRows = NULL # the rows to be removed
for(i in 1:nrow(myPLong)){
j = which(myPLong$Inducer == myPLong$Concurrent[i] & myPLong$Concurrent == myPLong$Inducer[i])
j = j [j > i]
if (length(j) > 0){
delRows = c(delRows, j)
}
}
myPLong <- myPLong[-delRows,]
myPLong <- subset(myPLong, select = c(Inducer, Concurrent, Comparison, Prediction))
write.csv(myPLong, "F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Long-YOURNAME.csv")
View(myPLong)
myPLong <- read.csv("F:/Google Drive/GitHub Repos/ste-phen/summer_school_sessions/9_Hypothesis_Challenge/myPredictions-Long-YOURNAME.csv")
Predictions <- separate(data = myPLong, col = Comparison,
into = c("Left", "Right"),
sep = "-", remove = FALSE)
Pred1 <- Predictions
Pred2 <- Predictions
Pred1$Inducer <- Pred1$Left
Pred1$Concurrent <- Pred1$Right
Pred2$Inducer <- Pred2$Right
Pred2$Concurrent <- Pred2$Left
Predictions <- rbind(Pred1, Pred2)
Predictions <- subset(Predictions, select = c("Inducer", "Concurrent", "Comparison", "Prediction"))
Domains <- sort(unique(Predictions$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
Predictions$Inducer2 <- mapvalues(Predictions$Inducer, from = Domains, to= HighValues)
Predictions$Concurrent2 <- mapvalues(Predictions$Concurrent, from = Domains, to= HighValues)
Predictions$Inducer2 <- factor(Predictions$Inducer2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Concurrent2 <- factor(Predictions$Concurrent2,
level = c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted",
"Stressed/Calm", "Loud/Quiet", "Bright/Dark", "Red/Blue",
"Red/Green", "Red/Yellow", "Yellow/Blue", "Noisy/Tonal",
"High Pitch/Low Pitch", "Jagged/Curvy", "Large/Small",
"Fast/Slow"))
Predictions$Prediction <-as.numeric(Predictions$Prediction)
ggplot(data= Predictions, aes(x=Concurrent2, y=Inducer2, fill=Prediction)) +
geom_tile(color = "white") +
ggtitle("Biases - My Predictions") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Direction and Strength of Associaton") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
View(Predictions)
